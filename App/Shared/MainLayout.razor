@inherits LayoutComponentBase
@inject HttpClient Http
@inject NavigationManager navManager
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject ILogger<MainLayout> logger
@inject IJSRuntime JSRuntime
@inject IModalService modal
@* <div class="fixed-top justify-content-center bg-light">
  <p>&nbsp;<!--Top bar content will go here--></p>
</div> *@
<div class="main">
  @if (isLoading)
  {
    <div class="alert alert-info row justify-content-center" role="alert">
      <Spinner></Spinner>Loading...
    </div>
  }
  else
  {
    @if (isLoggedIn)
    {
      if (!isSubPage && isOnBoarded)
      {
        <div class="row header no-gutters">
          <div class="col-6 no-gutters"><button class="btn btn-primary navbar-brand" type="button" @onclick="NavigateToReferralCode">Share code with friends</button></div>   
          <div class="col-6 no-margins text-right alert-icon">
            <a role="button" @onclick="NavigateToViewNotifications">
              @if(numNotifications > 0)
              {
                <div class="notification-alert">@numNotifications</div>
              }
              <i class="far fa-bell"></i>
            </a> 
          </div>
        </div>
      }

      @if (!isRunningInApp && !hasDismissedNotRunningInApp && isOnBoarded)
      {
        <div class="alert alert-warning row no-gutters justify-content-center" role="alert">
          You are running in a browser, not installed on your device.  For quicker access, install the application to your device.  See instructions&nbsp;<a href="https://medium.com/progressivewebapps/how-to-install-a-pwa-to-your-device-68a8d37fadc1" target="_blank" alt="instructions for notifications">here&nbsp;<i class="fas fa-external-link-alt"></i></a>.&nbsp;<span class="badge badge-pill badge-danger" ><a role="button" @onclick="DismissInstallWarning" alt="Dismiss Warning"><i class="fas fa-times"></i>&nbsp;Dismiss</a></span>
        </div>
      }
      @if (!string.IsNullOrWhiteSpace(successMessage))
      {
        <div class="alert alert-success row no-gutters justify-content-center" role="alert">
          @successMessage&nbsp;<span class="badge badge-pill badge-success" ><a role="button" @onclick="DismissSuccessMessage" alt="Dismiss Success Message"><i class="fas fa-times"></i>&nbsp;Dismiss</a></span>
        </div>
      }
    }

    @if(!isLoggedIn || isSubPage || !isOnBoarded)
    {
      @Body
    }
    else
    {
      <div class="container-fluid">
        @Body
      </div>
      
    }
  }

  @if (isLoggedIn && isOnBoarded && !isSubPage)
  {
    <nav class="navbar fixed-bottom navbar-light bg-light">
      <a role="button" class="nav-item" @onclick="NavigateToMyProfile" >
        <div class="text-center">
          <i class="fas fa-user @menuCssClassProfile"></i>
          <h6 class="@menuCssClassProfile">My Profile</h6>
        </div>
      </a>
      <a role="button" class="nav-item" @onclick="NavigateToCheckin" >
        <div class="nav-item text-center">
          <i class="fas fa-compass @menuCssClassCheckIn"></i>
          <h6 class="@menuCssClassCheckIn">Check-in</h6>
        </div>
      </a>
      <a role="button" class="nav-item" @onclick="NavigateToRewards" >
        <div class="nav-item text-center">
          <i class="fas fa-star @menuCssClassRewards"></i>
          <h6 class="@menuCssClassRewards">Rewards</h6>
        </div>
      </a>
      <a role="button" class="nav-item" @onclick="NavigateToLearnMore" >
        <div class="nav-item text-center">
          <i class="fas fa-book @menuCssClassLearnMore"></i>
          <h6 class="@menuCssClassLearnMore">Learn More</h6>
        </div>
      </a>
      <a role="button" class="nav-item" @onclick="NavigateToTeams" >
        <div class="nav-item text-center">
          <i class="fas fa-user-friends @menuCssClassTeams"></i>
          <h6 class="@menuCssClassTeams">Teams</h6>
        </div>
      </a>
  </nav>
  }
</div>

@code
{
  private string outerClass = "main";
  private bool isLoggedIn = false;
  private bool isOnBoarded = true;
  private bool isLoading = false;
  private bool isRunningInApp = false;
  private bool hasDismissedNotRunningInApp = false;
  private bool isSubPage = false;
  private int numNotifications = 0;

  private string menuCssClassProfile = "";
  private string menuCssClassCheckIn = "";
  private string menuCssClassRewards = "";
  private string menuCssClassLearnMore = "";
  private string menuCssClassTeams = "";

  private string successMessage = "";

  protected async override Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    navManager.LocationChanged += HandleLocationChanged;

    isLoading = true;
    var sessionId = Guid.NewGuid().ToString();
    var baseUrl = navManager.ToBaseRelativePath(navManager.Uri);
    logger.LogDebug("OnInitializedAsync for new session {SessionId} on page {BaseUrl}", sessionId, baseUrl);
    localStorage.SetSessionId(sessionId);

    //If we are on a page that requires auth.. (I.e. anything but the home page) 
    //or we are logged in; and we are not heading to logout or and error page
    if ((baseUrl.Trim().Length > 0 || !string.IsNullOrWhiteSpace(localStorage.GetJwt()))
      && $"/{baseUrl.ToLower()}" != AppConstants.PageUrlLogout 
      && $"/{baseUrl.ToLower()}" != AppConstants.InvalidSession
      && $"/{baseUrl.ToLower()}" != AppConstants.InvalidSession)
    {
      isRunningInApp = await JSRuntime.InvokeAsync<bool>("isAppInstalled");

      var appState = localStorage.GetAppState();
      if (isRunningInApp)
      {
        if (appState.InstalledState != AppState.FeatureState.Configured)
        {
          appState.InstalledState = AppState.FeatureState.Configured;
          localStorage.SetAppState(appState);
        }
      }
      else
      {
        if (appState.InstalledState == AppState.FeatureState.OptedOut)
        {
          hasDismissedNotRunningInApp = true;
        }
        else
        {
          appState.InstalledState = AppState.FeatureState.None;
          localStorage.SetAppState(appState);
        }
      }
    
      var result = await Http.PostApiData<GetLoggedInUserResponse, MainLayout>(navManager, logger, localStorage, $"https://trackersafe.azurewebsites.net/api/GetLoggedInUser", new GetLoggedInUserRequest());
      isLoggedIn = result != null && !string.IsNullOrWhiteSpace(result.UserName);

      logger.LogDebug("OnInitializedAsync isLoggedIn? {IsLoggedIn}; Push Notifications? {PushNotificationState}; ", isLoggedIn, appState.PushNotificationState);

      if (isLoggedIn)
      {
        if (appState.PushNotificationState == AppState.FeatureState.None)
        {
          logger.LogDebug("PushNotificationState is None, Redirecting");
          isOnBoarded = false;
          navManager.NavigateToPage(AppConstants.PageUrlPushNotifications);
        }
        else if (appState.LocationState == AppState.FeatureState.None)
        {
          logger.LogDebug("LocationState is None, Redirecting");
          isOnBoarded = false;
          navManager.NavigateToPage(AppConstants.PageUrlGetLocation);
        }
        else if (!appState.HasSeenReferralCode)
        {
          logger.LogDebug("Has not seen referral code, Redirecting");
          isOnBoarded = false;
          navManager.NavigateToPage(AppConstants.PageUrlReferralCode);
        }
        else
        {
          //check for any notifications on entry
          var notificationsResult = await Http.PostApiData<GetNotificationsForUserResponse, MainLayout>(navManager, logger, localStorage, $"https://trackersafe.azurewebsites.net/api/GetNotificationsForUser", new GetNotificationsForUserRequest());
          if (notificationsResult != null)
          {
            localStorage.SetNumberOfAlerts(notificationsResult.Notifications == null ? 0 : notificationsResult.Notifications.Count(n => n.IsRead == false));
          }
        }
      }
    }

    SetNavigationVisualChange(navManager.Uri);

    isLoading = false;
  }

  private void DismissInstallWarning(MouseEventArgs e)
  {
    var appState = localStorage.GetAppState();
    if (appState.InstalledState != AppState.FeatureState.Configured)
    {
      appState.InstalledState = AppState.FeatureState.OptedOut;
      localStorage.SetAppState(appState);
      hasDismissedNotRunningInApp = true;
    }
  }

  private void DismissSuccessMessage(MouseEventArgs e)
  {
    localStorage.SetSuccessMessage("");
  }

  private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
  {
    SetNavigationVisualChange(e.Location);
  }

  private void SetNavigationVisualChange(string url)
  {
    successMessage = localStorage.GetSetSuccessMessage();
    if (!string.IsNullOrWhiteSpace(successMessage))
    {
      localStorage.SetSuccessMessage("");
    }

    outerClass = isOnBoarded ? "main" : "";

    numNotifications = localStorage.GetNumberOfAlerts();

    menuCssClassProfile = "";
    menuCssClassCheckIn = "";
    menuCssClassRewards = "";
    menuCssClassRewards = "";
    menuCssClassLearnMore = "";
    menuCssClassTeams = "";
    isSubPage = false;

    if (url.ToLower().Contains(AppConstants.PageUrlMyProfile))
    {
      menuCssClassProfile = "active";
    }
    else if (url.ToLower().Contains(AppConstants.PageUrlCheckIn))
    {
      menuCssClassCheckIn = "active";
    }
    else if (url.ToLower().Contains(AppConstants.PageUrlRewards))
    {
      menuCssClassRewards = "active";
    }
    else if (url.ToLower().Contains(AppConstants.PageUrlLearnMore))
    {
      menuCssClassLearnMore = "active";
    }
    else if (url.ToLower().Contains(AppConstants.PageUrlTeams))
    {
      menuCssClassTeams = "active";
    }
    else if (url.ToLower().Contains(AppConstants.PageUrlSettings))
    {
      isSubPage = true;
    }
  }

  private void NavigateToReferralCode(MouseEventArgs e)
  {
    logger.LogDebug("NavigateToReferralCode");
    //navManager.NavigateToPage(AppConstants.PageUrlReferralCode);
    modal.Show<ShowReferralCode>("Referral Code");
  }

  private void NavigateToMyProfile(MouseEventArgs e)
  {
    logger.LogDebug("NavigateToMyProfile");
    navManager.NavigateToPage(AppConstants.PageUrlMyProfile);
  }

  private void NavigateToCheckin(MouseEventArgs e)
  {
    logger.LogDebug("NavigateToCheckin");
    navManager.NavigateToPage(AppConstants.PageUrlCheckIn);
  }

  private void NavigateToRewards(MouseEventArgs e)
  {
    logger.LogDebug("NavigateToRewards");
    navManager.NavigateToPage(AppConstants.PageUrlRewards);
  }
  private void NavigateToLearnMore(MouseEventArgs e)
  {
    logger.LogDebug("NavigateToLearnMore");
    navManager.NavigateToPage(AppConstants.PageUrlLearnMore);
  }
  private void NavigateToTeams(MouseEventArgs e)
  {
    logger.LogDebug("NavigateToTeams");
    navManager.NavigateToPage(AppConstants.PageUrlTeams);
  }

  private void NavigateToViewNotifications(MouseEventArgs e)
  {
    logger.LogDebug("NavigateToViewNotifications");
    navManager.NavigateToPage(AppConstants.PageUrlViewNotifications);
  }
}