@attribute [Microsoft.AspNetCore.Components.RouteAttribute(@TrackerSafe.App.AppConstants.PageUrlCheckIn)]
@inject HttpClient Http
@inject NavigationManager navManager
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject ILogger<CheckIn> logger
@inject LocationService locationService

<div class="row">
  <h1 class="top30 mt-5">Check-in</h1>
</div>
@if (isLoading)
{
  <LoadingButton></LoadingButton>
}
else
{
  <div class="row tab-menu no-gutters">
    <div class="col-6 text-center"><a role="button" class="@buttonClassQr" @onclick="SwitchToQr">Scan <br />QR Code</a></div>
    <div class="col-6 text-center"><a role="button" class="@buttonClassLocation" @onclick="SwitchToLocation">Use <br />Location</a></div>
  </div>
  @if(!string.IsNullOrWhiteSpace(buttonClassQr))
  {
    if (string.IsNullOrWhiteSpace(qrBusiness))
    {
      <div class="row header bg-maincolour no-gutters">
        <div class="col-11 no-gutters"><h4 style="margin-top: 4px;">Scan QR Code on your Device's Camera</h4></div> 
      </div>
      <div class="row">
        <div class="white-card">
          <div class="col-12 text-center">
            @* <i class="fas fa-camera-retro mt-3 mb-3" style="font-size: 64px;"></i> *@
            <img src="img/QrInstruction.jpeg" style="height:300px">
          </div>
          <div class="col-12">
            <ol>
              <li>Exit this app and open your phone camera.</li>
              <li>Point your phone camera at the QR code.</li>
              <li>Open the link that appears to complete check in.</li>
            </ol>
          </div>
        </div>
      </div>
    }
    else
    {
      @if(!qrCheckinSuccess)
      {
        <div class="alert alert-danger row justify-content-center" role="alert">
          @qrCheckinMessage
        </div>
      }

      <div class="row qrbussiness-card">
      <div class="col-12">
        <h3>@qrBusiness</h3>
        <p>@qrBusinessAddress</p> 
        <p><strong>Time: @checkinTimeUtc.ToLocalTime().ToString("MMM dd") @checkinTimeUtc.ToLocalTime().ToString("hh:mm tt")</strong></p>
        <p><button class="btn btn-primary btn-block" type="button" @onclick="ConfirmQrCheckin">Confirm check-In</button></p>
      </div>
  </div>
    }
  }
  else
  {
    <div class="row header bg-maincolour no-gutters">
      <div class="col-11 no-gutters"><h4 style="margin-top: 4px;">Current Location</h4></div> 
    </div>
    <div class="row">
      @* <div class="col-12">
        <label for="address">Search Address</label>
        <input type="text" class="form-control" id="address" @ref="textAutoComplete">
      </div>   *@
    </div>
    <GoogleMap @ref="@map" Id="map" Options="@mapOptions" OnAfterInit="async () => await OnAfterMapInit()"></GoogleMap>
    @if (mapIsSet)
    {
      <div class="row"><button class="btn btn-primary btn-block mt-3" type="button"  @onclick="ConfirmCheckIn">Confirm check-in</button></div>
    }
    <br />
    <br />
    <br />
    <br />
  }
}

@code 
{
  private bool isLoading = false;
  private bool mapIsSet = false;
  private GoogleMap map;
  private MapOptions mapOptions;
  private Marker marker;
  
  private Location location;
  //private Autocomplete autocomplete;
  //ElementReference textAutoComplete;

  private string buttonClassQr = "active";
  private string buttonClassLocation = "";
  private bool qrCheckinSuccess = true;
  private string qrCheckinMessage = "";

  private double? qrLat;
  private double? qrLon;
  private string qrBusiness;
  private string qrBusinessAddress;

  private DateTime checkinTimeUtc;

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    logger.LogDebug($"OnInitializedAsync");
    checkinTimeUtc = DateTime.UtcNow;

    var uri = navManager.ToAbsoluteUri(navManager.Uri);
    StringValues checkInType;
    StringValues busName;
    StringValues busDesc;
    StringValues lat;
    StringValues lon;
    if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("type", out checkInType))
    {
      if (string.Equals(checkInType.ToString(), "qr", StringComparison.CurrentCultureIgnoreCase))
      {
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("placeName", out busName))
        {
          logger.LogDebug("Got QR Business Name {BusinessName}", busName.ToString());
          qrBusiness = busName.ToString();
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("placeDesc", out busDesc))
        {
          logger.LogDebug("Got QR Business Description {BusinessDescription}", busDesc.ToString());
          qrBusinessAddress = busDesc.ToString();
        }
    
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("lat", out lat))
        {
          double qrLatValue;
          if (double.TryParse(lat.ToString(), out qrLatValue))
          {
            qrLat = qrLatValue;
          }
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("lon", out lon))
        {
          double qrLonValue;
          if (double.TryParse(lon.ToString(), out qrLonValue))
          {
            qrLon = qrLonValue;
          }
        }
      }
    }
  }


  private void SwitchToQr(MouseEventArgs e)
  {
    logger.LogDebug($"SwitchToQr");
    buttonClassQr = "active";
    buttonClassLocation = "";
  }

  private async void SwitchToLocation(MouseEventArgs e)
  {
    logger.LogDebug($"SwitchToLocation");
    buttonClassQr = "";
    buttonClassLocation = "active";
    
    isLoading = true;
    location = await locationService.GetLocationAsync();
    var appState = localStorage.GetAppState();
    if (location != null)
    {
      appState.LocationState = AppState.FeatureState.Configured;
      SetMap(Convert.ToDouble(location.Latitude), Convert.ToDouble(location.Longitude));
    }
    else
    {
      appState.LocationState = AppState.FeatureState.OptedOut;
    }
    localStorage.SetAppState(appState);
    isLoading = false;
    StateHasChanged();
  }

  private async Task OnAfterMapInit()
  {
    logger.LogDebug("OnAfterMapInit");

    //first time setup
    if (!mapIsSet)
    {
      await map.InteropObject.AddListener("dragend", OnDragEnd);
    }
    mapIsSet = true;

    await PlaceMarker();

    //This is not working yet, might need to check the NuGet package and wait till it's updated..
    /*
    autocomplete = await Autocomplete.CreateAsync(map.JsRuntime, textAutoComplete, new AutocompleteOptions
    {
      StrictBounds = false
    });

    logger.LogDebug("OnAfterMapInit - created autocomplete");
    await autocomplete.SetFields(new[] { "address_components", "geometry", "name" });

    await autocomplete.AddListener("place_changed", async () =>
    {
      var place = await autocomplete.GetPlace();

      if (place?.Geometry == null)
      {
        //this.message = "No results available for " + place?.Name;
        logger.LogDebug("Autocomplete: No results for {PlaceName}", place?.Name);
      }
      else if (place.Geometry.Location != null)
      {
        logger.LogDebug("Autocomplete: Got single location {Lat}, {Lon}", place.Geometry.Location.Lat, place.Geometry.Location.Lng);
        await map.InteropObject.SetCenter(place.Geometry.Location);
        await map.InteropObject.SetZoom(18);

        marker = await Marker.CreateAsync(map.JsRuntime, new MarkerOptions
        {
          Position = place.Geometry.Location,
          Map = map.InteropObject,
          Title = place.Name
        });

      }
      else if (place.Geometry.Viewport != null)
      {
        logger.LogDebug("Autocomplete: Multiple results for {PlaceName} North: {ViewPortNorth}", place.Name, place.Geometry.Viewport.North);
        await map.InteropObject.FitBounds(place.Geometry.Viewport, 5);
      }

      this.StateHasChanged();
    });
    */
  }



  private void SetMap(double lat, double lon)
  {
    logger.LogDebug($"SetMap");
    mapOptions = new MapOptions()
    {
      Zoom = 18,
      Center = new LatLngLiteral()
      {
        Lat = lat,
        Lng = lon
      },
      MapTypeId = MapTypeId.Roadmap
    };
  }

  private async void OnDragEnd()
  {
    logger.LogDebug($"OnDragEnd");
    await PlaceMarker();
  }

  private async Task PlaceMarker()
  {
    var position = await map.InteropObject.GetCenter();

    if (marker == null)
    {
      marker = await Marker.CreateAsync(map.JsRuntime, new MarkerOptions()
      {
        Position = position,
        Map = map.InteropObject,
        Label = $"Use this location"
      });
    }
    else
    {
      await marker.SetPosition(position);
    }

    logger.LogDebug("Setting marker location to {Lat} {Lon}", position.Lat, position.Lng);
  }

  private async Task ConfirmQrCheckin()
  {
    isLoading = true;
    StateHasChanged();
    var req = new CreateCheckInRequest(DateTime.UtcNow, qrLat, qrLon, qrBusiness);
    var res = await Http.PostApiData<CreateCheckInResponse, CheckIn>(navManager, logger, localStorage, $"https://trackersafe.azurewebsites.net/api/CreateCheckIn", req);
    if (res.Successful)
    {
      logger.LogDebug("ConfirmQrCheckin success");
      qrCheckinSuccess = true;
      localStorage.SetSuccessMessage("Successfully checked in via QR Code!");
      navManager.NavigateToPage(AppConstants.PageUrlMyProfile);
    }
    else
    {
      logger.LogDebug("ConfirmQrCheckin failure");
      qrCheckinSuccess = false;
      qrCheckinMessage = res.Message;
      StateHasChanged();
    }
    isLoading = false;
  }

  private async Task ConfirmCheckIn()
  {
    isLoading = true;
    StateHasChanged();
    if (marker == null)
    {
      await PlaceMarker();
    }
    var position = await marker.GetPosition();
    logger.LogDebug("Setting location to {Lat} {Lon}", position.Lat, position.Lng);
    var req = new CreateCheckInRequest(DateTime.UtcNow, position.Lat, position.Lng, null);
    await Http.PostApiData<CreateCheckInResponse, CheckIn>(navManager, logger, localStorage, $"https://trackersafe.azurewebsites.net/api/CreateCheckIn", req);
    localStorage.SetSuccessMessage("Successfully checked in via Location!");
    navManager.NavigateToPage(AppConstants.PageUrlMyProfile);
  }

}