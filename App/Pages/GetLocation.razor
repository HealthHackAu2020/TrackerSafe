@attribute [Microsoft.AspNetCore.Components.RouteAttribute(@TrackerSafe.App.AppConstants.PageUrlGetLocation)]
@inject HttpClient Http
@inject NavigationManager navManager
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject ILogger<GetLocation> logger
@inject LocationService locationService

<div class="row header bg-maincolour">
  <div class="col-1 alert-icon"><img src="img/logo.svg" height="50"></div> 
  <div class="col-11 no-gutters text-right"><h3 style="margin-top: 14px;">Location data</h3></div>  
</div>
<div class="main">
  <div class="content"> 
    <div class="row justify-content-center pt-3">
        <div class="col-9 text-center">
          <h1>
            Provide access to your location data
          </h1>
        </div>
      </div>
    @if (isLoading)
    {
      <LoadingButton></LoadingButton>
      if (isTimeUp)
      {
        <div class="alert alert-warning row justify-content-center" role="alert">
          It looks like we might not be able to set up location access, this might be due to your device not supporting it.  Press "OK" below to move on, you can still check in via QR codes and the map.
        </div>
        <div class="row justify-content-center">
          <button class="btn btn-primary btn-block" type="button" @onclick="MoveOn">OK</button>
        </div>
      }
    }
    else
    {
      if (isFirstTime)
      {
        <div class="row justify-content-center">
          <h3>We will only use it to get your current location when checking in to a new place</h3>
          <button class="btn btn-primary btn-block" type="button" @onclick="SetupLocation">Setup Location Access</button>
        </div>
      }
      else if (isConfigured)
      {
        <div class="alert alert-success row justify-content-center" role="alert">
          Your location is available!
        </div>
      }
      else
      {
        <div class="alert alert-danger row justify-content-center" role="alert">
          You have not enalbed location on this device.  If your device prompted you and you did not allow it, please find instructions on how to retry for different browsers <a href="https://docs.buddypunch.com/en/articles/919258-how-to-enable-location-services-for-chrome-safari-and-android-ios-devices-gps-setting" target="_blank" alt="instructions for notifications"> here <i class="fas fa-external-link-alt"></i></a>.
        </div>
        <div class="row justify-content-center">
          <button class="btn btn-primary btn-block" type="button" @onclick="SetupLocation">Try Again</button>
        </div>
        <div class="row justify-content-center">
          &nbsp;
        </div>
        <div class="alert alert-warning row justify-content-center" role="alert">
          It looks like we might not be able to set up location access, this might be due to your device not supporting it.  Press "OK" below to move on, you can still check in via QR codes and the map.
        </div>
        <div class="row justify-content-center">
          <button class="btn btn-primary btn-block" type="button" @onclick="MoveOn">OK</button>
        </div>
      }
    }
  </div>
</div>


@code 
{
  private bool isLoading = false;
  private bool isFirstTime = false;
  private bool isConfigured = false;
  private bool isTimeUp = false;

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    isLoading = true;
    var appState = localStorage.GetAppState();
    if (appState.LocationState == AppState.FeatureState.None)
    {
      isFirstTime = true;
    }
    isLoading = false;
    StateHasChanged();
  }

  private async void SetupLocation(MouseEventArgs e)
  {
    isFirstTime = false;
    isLoading = true;
    StateHasChanged();
    logger.LogDebug($"SetupLocation");
    if (!isConfigured)
    {
      Location location = null;
      try
      {
        //Kick off a timer but don't await
        KickOffTimer();
        location = await locationService.GetLocationAsync();
      }
      catch (Exception ex)
      {
        logger.LogError(ex, "Unable to get location");
      }
      var appState = localStorage.GetAppState();
      if (location != null)
      {
        appState.LocationState = AppState.FeatureState.Configured;
        isConfigured = true;
      }
      else
      {
        appState.LocationState = AppState.FeatureState.OptedOut;
      }
      localStorage.SetAppState(appState);
    }
    isLoading = false;
    StateHasChanged();

    if (isConfigured)
    {
      localStorage.SetSuccessMessage("Your location is configured and available!");
      navManager.NavigateToPage(AppConstants.PageUrlHomeLoggedIn, true);
    }
  }

  private void MoveOn(MouseEventArgs e)
  {
    logger.LogDebug("MoveOn");
    var appState = localStorage.GetAppState();
    appState.LocationState = AppState.FeatureState.OptedOut;
    localStorage.SetAppState(appState);
    isConfigured = false;
    navManager.NavigateToPage(AppConstants.PageUrlHomeLoggedIn, true);
  }

  private async void KickOffTimer()
  {
    await Task.Delay(5000);
    isTimeUp = true;
    StateHasChanged();
  }
}