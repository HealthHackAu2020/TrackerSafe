@attribute [Microsoft.AspNetCore.Components.RouteAttribute(@TrackerSafe.App.AppConstants.PageUrlPushNotifications)]
@inject HttpClient Http
@inject NavigationManager navManager
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject ILogger<PushNotification> logger
@inject IJSRuntime JSRuntime

<div class="row justify-content-center">
  <h1 class="text-center top30 mt-5"><i class="fas fa-bell"></i> Provide Access to your Notifications</h1>
</div>
  
@if (isLoading)
{
  <LoadingButton></LoadingButton>
  if (isTimeUp)
  {
    <div class="alert alert-warning row justify-content-center" role="alert">
      It looks like we might not be able to set up push notifications, this might be due to your device not supporting them.  Make sure you check back regularly to stay on top of important information.<br />You can always try again by testing this out from the Settings page on your Profile.  <br />Please find instructions on how to allow notifications for different devices and browsers <br /><a href="https://mobilemonkey.com/help/article/xjrvxif08a-how-to-unblock-notifications-permissions-on-your-browser" target="_blank" alt="instructions for notifications">here <i class="fas fa-external-link-alt"></i></a>.
    </div>
    <div class="row justify-content-center">
      <button class="btn btn-primary btn-block mt-5" type="button" @onclick="MoveOn">OK</button>
    </div>
  }
}
else
{
  if (isFirstTime)
  {
    <div class="row justify-content-center">
      <h3>We will notify you when you come in contact with a confirmed COVID case</h3>
      <button class="btn btn-primary btn-block mt-5" type="button" @onclick="SetupNotifications">Setup Web Push Notifications</button>
    </div>
  }
  else if (isConfigured)
  {
    <div class="alert alert-success row justify-content-center" role="alert">
      <Spinner></Spinner>You have successfully set up Web Push Notifications!
    </div>
  }
  else
  {
    <div class="alert alert-danger row justify-content-center" role="alert">
      You have not registered Web Push Notifications on this device.  If your device prompted you and you did not allow it, please find instructions on how to retry for different browsers&nbsp;<a href="https://mobilemonkey.com/help/article/xjrvxif08a-how-to-unblock-notifications-permissions-on-your-browser" target="_blank" alt="instructions for notifications">here <i class="fas fa-external-link-alt"></i></a>.
    </div>
    <div class="row justify-content-center">
      <button class="btn btn-primary btn-block mt-5" type="button" @onclick="SetupNotifications">Try Again</button>
    </div>
  }
}

@code 
{
  private bool isLoading = false;
  private bool isFirstTime = false;
  private bool isConfigured = false;
  private bool isTimeUp = false;

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    logger.LogDebug("OnInitializedAsync");
    isLoading = true;
    var appState = localStorage.GetAppState();
    if (appState.PushNotificationState == AppState.FeatureState.None)
    {
      isFirstTime = true;
    }
    isLoading = false;
  }

  private async void SetupNotifications(MouseEventArgs e)
  {
    isFirstTime = false;
    isLoading = true;
    StateHasChanged();
    logger.LogDebug($"SetupNotifications");
    if (!isConfigured)
    {
      //Kick off a timer but don't await
      KickOffTimer();
      await RequestNotificationSubscriptionAsync();
    }
    isLoading = false;
    StateHasChanged();

    if (isConfigured)
    {
      localStorage.SetSuccessMessage("You have successfully set up Web Push Notifications!");
      navManager.NavigateToPage(AppConstants.PageUrlHomeLoggedIn, true);
    }
    isLoading = false;
  }

  public async Task RequestNotificationSubscriptionAsync()
  {
    NotificationSubscription subscription = null;
    try
    {
      subscription = await JSRuntime.InvokeAsync<NotificationSubscription>("blazorPushNotifications.requestSubscription");
    }
    catch (Exception ex)
    {
      logger.LogError(ex, "Unable to set push notifications");
    }
    if (subscription != null)
    {
      logger.LogInformation("RequestNotificationSubscriptionAsync - got subscription!");
      await SubscribeToNotifications(subscription);

      var appState = localStorage.GetAppState();
      appState.PushNotificationState = AppState.FeatureState.Configured;
      localStorage.SetAppState(appState);
      isConfigured = true;
      isTimeUp = false;
    }
    else
    {
      logger.LogInformation("RequestNotificationSubscriptionAsync - failed to get subscription!");

      var appState = localStorage.GetAppState();
      appState.PushNotificationState = AppState.FeatureState.OptedOut;
      localStorage.SetAppState(appState);
      isConfigured = false;
      isTimeUp = false;
    }
  }

  public async Task SubscribeToNotifications(NotificationSubscription subscription)
  {
    var deviceId = localStorage.GetDeviceId();
    logger.LogInformation("SubscribeToNotifications sending for device {DeviceId}", deviceId);
    var request = new CreatePushSubscriptionRequest(deviceId, subscription.Url, subscription.P256dh, subscription.Auth);
    var result = await Http.PostApiData<CreatePushSubscriptionResponse, PushNotification>(navManager, logger, localStorage, $"https://trackersafe.azurewebsites.net/api/CreatePushSubscription", request);
    localStorage.SetPushNotificationId(result.PushSubscriptionId);
  }

  private void MoveOn(MouseEventArgs e)
  {
    logger.LogDebug("MoveOn");
    var appState = localStorage.GetAppState();
    appState.PushNotificationState = AppState.FeatureState.OptedOut;
    localStorage.SetAppState(appState);
    isConfigured = false;
  }

  private async void KickOffTimer()
  {
    await Task.Delay(5000);
    isTimeUp = true;
    StateHasChanged();
  }
}