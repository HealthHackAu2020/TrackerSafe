@attribute [Microsoft.AspNetCore.Components.RouteAttribute(@TrackerSafe.App.AppConstants.PageUrlSettings)]
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject NavigationManager navManager
@inject ILogger<Index> logger

<div class="row header bg-maincolour no-gutters">
  <div class="col-1 alert-icon"><a role="button" @onclick="NavigateToProfile"><i class="fas fa-angle-left"></i></a></div> 
  <div class="col-11 no-gutters"><h4 style="margin-top: 4px;">Settings</h4></div>   
</div>
<div class="row info-card">
  <div class="col-12"><h2>My settings</h2></div>
  <div class="col-7"><p>Web push notification</p></div>
  @if (featurePushNotificationsEnabled)
  {
    <FeatureEnabled></FeatureEnabled>
  }
  else
  {
    <FeatureDisabled></FeatureDisabled>
  }
  <div class="col-12"><button class="btn btn-primary btn-block mt-3" type="button" @onclick="NavigateToPushNotificationsTest">Test push notifications</button></div>
</div>
<div class="row info-card">
  <div class="col-7"><p>Location</p></div>
  @if (featureLocationEnabled)
  {
    <FeatureEnabled></FeatureEnabled>
  }
  else
  {
    <FeatureDisabled></FeatureDisabled>
  }
  <div class="col-12"><button class="btn btn-primary btn-block mt-3" type="button" @onclick="NavigateToGetLocationTest">Test Location</button></div>
</div>
<div class="row info-card">
  <div class="col-7"><p>Locally installed app</p></div>
  @if (featureInstalledApp)
  {
    <FeatureEnabled></FeatureEnabled>
  }
  else
  {
    <FeatureDisabled></FeatureDisabled>
  }
</div>
<div class="row btn-card  no-gutters">
  <div class="col-2 text-center">
    <p>
      <h2><i class="fas fa-key"></i></h2>
    </p>
  </div>
  <div class="col-10">
    <h4>Change password</h4>
  </div>
</div>
<div class="row btn-card  no-gutters" style="margin-bottom: 55px;">
  <div class="col-2 text-center">
    <p>
      <h2><i class="fas fa-sign-out-alt"></i></h2>
    </p>
  </div>
  <div class="col-10">
    <h4><a role="button" @onclick="NavigateToLogout">Log out</a></h4>
  </div>
</div>

@code 
{
  private bool featurePushNotificationsEnabled = false;
  private bool featureLocationEnabled = false;
  private bool featureInstalledApp = false;
  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    var appState = localStorage.GetAppState();
    if (appState.PushNotificationState == AppState.FeatureState.Configured)
    {
      featurePushNotificationsEnabled = true;
    }
    if (appState.LocationState == AppState.FeatureState.Configured)
    {
      featureLocationEnabled = true;
    }
    if (appState.InstalledState == AppState.FeatureState.Configured)
    {
      featureInstalledApp = true;
    }
  }

  private void NavigateToPushNotificationsTest(MouseEventArgs e)
  {
    logger.LogDebug("NavigateToPushNotificationsTest");
    navManager.NavigateToPage(AppConstants.PageUrlPushNotificationsTest);
  }

  private void NavigateToGetLocationTest(MouseEventArgs e)
  {
    logger.LogDebug("NavigateToGetLocationTest");
    navManager.NavigateToPage(AppConstants.PageUrlGetLocationTest);
  }

  private void NavigateToLogout(MouseEventArgs e)
  {
    logger.LogDebug("NavigateToLogout");
    navManager.NavigateToPage(AppConstants.PageUrlLogout);
  }

  private void NavigateToProfile(MouseEventArgs e)
  {
    logger.LogDebug("NavigateToProfile");
    navManager.NavigateToPage(AppConstants.PageUrlMyProfile);
  }
}